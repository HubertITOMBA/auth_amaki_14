// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  Admin
  Membre
  Invite
}


enum STATUS {
Termine
Encours
Attente
}

enum MembreStatus {
  Actif
  Inactif
}


model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerified   DateTime?
  password        String?
  image           String?   @db.Text
  role            UserRole  @default(Membre)

  lastLogin DateTime? @updatedAt
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Membre        Membre?
  Accounts     Account[]
  
}

model Assistance {
  id          String    @id @default(cuid())
  title       String    @unique
  description String    @db.Text
  status      STATUS    @default(Attente)
  price        Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
 
}

model Membre {
  id          String    @id @default(cuid())
  userId      String   @unique
  lastname    String? 
  firstname   String? 
  sex         String?   
  bornedAt    DateTime?      
  status      MembreStatus    @default(Actif)
  phone       String?  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Cotisation Cotisation[]
  Adresse    Adresse[]
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
}


model Cotisation {
  id          String    @id @default(cuid())
  membreId    String
  description String?    @db.Text
  status      STATUS    @default(Attente)
  amount      Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  assistanceId  String

  Membre    Membre     @relation(fields: [membreId], references: [id], onDelete: Cascade)
 
}

model Adresse {
  id          String    @id @default(cuid())
  membreId    String
  streetnum   String? 
  street1     String?  
  street2     String?     
  codepost    String?  
  city        String?
  country     String?   
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
 
  Membre    Membre     @relation(fields: [membreId], references: [id], onDelete: Cascade)
    
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

